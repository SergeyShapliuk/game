import {useCallback, useEffect, useRef, useState} from "react";
import {motion} from "motion/react";


const ingredients = [
    {id: 1, name: "carrot", icon: "ü•ï"},
    {id: 2, name: "pumpkin", icon: "üéÉ"},
    {id: 3, name: "garlic", icon: "üßÑ"},
    {id: 4, name: "tomato", icon: "üçÖ"}
];

const ROWS = [10, 30, 60, 80];
const swipeThreshold = 100; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–≤–∞–π–ø–∞ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
const minSwipeSpeed = 5;

function Game() {
    const constraintsRef = useRef<any>(null);
    const planeRef = useRef<HTMLDivElement | null>(null);
    const startTouchX = useRef<number | null>(null);
    const startTouchTime = useRef<number | null>(null);
    const [fallingItems, setFallingItems] = useState([]);
    const [collected, setCollected] = useState({
        carrot: 0,
        pumpkin: 0,
        garlic: 0,
        tomato: 0
    });
    const [planeRowIndex, setPlaneRowIndex] = useState(1);
    const [planeRow, setPlaneRow] = useState(2);
    const [planeX, setPlaneX] = useState(0);
    const [fallingSpeed] = useState(0.2);

    // console.log("targetPosition", planeRef.current?.getBoundingClientRect());
    // console.log("fallingItems", fallingItems);
    // const generateFallingItems = () => {
    //     const xPosition = ROWS[Math.floor(Math.random() * ROWS.length)];
    //     const randomItem = ingredients[Math.floor(Math.random() * ingredients.length)];
    //     const itemsToAdd = [];
    //     ROWS.forEach((row) => {
    //         const numItems = Math.floor(Math.random() * 3) + 1; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç 1 –¥–æ 3 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—è–¥—É
    //         const rowDelay = Math.random() * 2000; // –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä—è–¥–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (0-2000)
    //         for (let i = 0; i < numItems; i++) {
    //             const randomIngredient =
    //                 ingredients[Math.floor(Math.random() * ingredients.length)];
    //             itemsToAdd.push({
    //                 ...randomIngredient,
    //                 id: new Date().getTime() + i + row, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id
    //                 x: xPosition, // –ü–æ–∑–∏—Ü–∏—è –ø–æ –æ—Å–∏ X
    //                 y: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –æ—Å–∏ Y —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    //                 // rowDelay
    //             });
    //         }
    //     });
    //     setFallingItems((prevItems) => [...prevItems, ...itemsToAdd]);
    // };
    const generateFallingItems = () => {
        const xPosition = ROWS[Math.floor(Math.random() * ROWS.length)];
        const randomItem = ingredients[Math.floor(Math.random() * ingredients.length)];
        const itemsToAdd = [];
        // ROWS.forEach((row) => {
        //     const numItems = Math.floor(Math.random() * 3) + 1; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç 1 –¥–æ 3 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—è–¥—É
        //     const rowDelay = Math.random() * 2000; // –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä—è–¥–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (0-2000)
        //     for (let i = 0; i < numItems; i++) {
        const randomIngredient =
            ingredients[Math.floor(Math.random() * ingredients.length)];
        itemsToAdd.push({
            ...randomIngredient,
            id: new Date().getTime(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id
            x: xPosition, // –ü–æ–∑–∏—Ü–∏—è –ø–æ –æ—Å–∏ X
            y: 0 // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –æ—Å–∏ Y —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            // rowDelay
            // speed:2
        });
        // }
        // });
        setFallingItems((prevItems) => [...prevItems, ...itemsToAdd]);
    };

    const animateFallingItems = useCallback(() => {
        fallingItems.forEach((item) => {
            setTimeout(() => {
                // –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                setFallingItems((prevItems) =>
                    prevItems.map((prevItem) =>
                        prevItem.id === item.id
                            ? {...prevItem, y: prevItem.y + 10} // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ Y
                            : prevItem
                    )
                );
            }, item.rowDelay); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä—è–¥–∞
        });
    }, [fallingItems]);
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    useEffect(() => {
        const interval = setInterval(generateFallingItems, 1000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥

        return () => clearInterval(interval);
    }, []);

    // useEffect(() => {
    //     const interval = setInterval(animateFallingItems, 50);
    //     return () => clearInterval(interval);
    // }, [animateFallingItems]);
    // –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–Ω–∏–∑
    // useEffect(() => {
    //     const interval = setInterval(() => {
    //         setFallingItems((items) =>
    //             items
    //                 .map((item) => ({
    //                     ...item,
    //                     y: item.y + fallingSpeed // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    //                 }))
    //                 .filter((item) => item.y < 200) // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
    //         );
    //     }, 50); // –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    //
    //     return () => clearInterval(interval);
    // }, [fallingSpeed]);
    useEffect(() => {
        let animationFrame;
        const animate = () => {
            setFallingItems((items) =>
                items
                    .map((item) => ({
                        ...item,
                        y: item.y + fallingSpeed // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                    }))
                    .filter((item) => {
                        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–∞–º–æ–ª–µ—Ç–∞
                        const planeRect = planeRef.current && planeRef.current!.getBoundingClientRect();
                        if (!planeRect) return true;

                        const planex = planeRect.left;
                        const planeY = planeRect.top;
                        const planeWidth = planeRect.width;
                        const planeHeight = planeRect.height;

                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª–∏
                        const itemX = (item.x / 100) * window.innerWidth;
                        const itemY = (item.y / 100) * window.innerHeight;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å —Å–∞–º–æ–ª–µ—Ç–æ–º
                        const isCollected =
                            itemY >= planeY && // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
                            itemY <= planeY + planeHeight && // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
                            itemX >= planex - planeWidth && // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
                            itemX <= planex + planeWidth; // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞

                        if (isCollected) {
                            setCollected((prev) => ({
                                ...prev,
                                [item.name]: (prev[item.name] || 0) + 1
                            }));
                            return false; // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Å–æ–±—Ä–∞–Ω
                        }

                        return item.y < 200; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–±—Ä–∞–Ω –∏ –Ω–µ –≤—ã—à–µ–ª –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
                    })
            );
            animationFrame = requestAnimationFrame(animate);
        };
        animationFrame = requestAnimationFrame(animate);
        return () => cancelAnimationFrame(animationFrame);
    }, [fallingSpeed]);
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–æ–º —á–µ—Ä–µ–∑ –º—ã—à—å
    const handleMouseMove = useCallback((e) => {
        const container = e.target.getBoundingClientRect();
        const x = ((e.clientX - container.left) / container.width) * 100;
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ä—è–¥
        const closestRow = ROWS.reduce(
            (closest, row, idx) =>
                Math.abs(row - x) < Math.abs(ROWS[closest] - x) ? idx : closest,
            0
        );
        setPlaneRow(closestRow); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä—è–¥
    }, []);

    const movePlane = (direction) => {
        setPlaneRowIndex((prevIndex) => {
            const newIndex = prevIndex + direction;
            if (newIndex < 0 || newIndex >= ROWS.length) return prevIndex; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            return newIndex;
        });
    };

    const handleKeyDown = useCallback(
        (event) => {
            if (event.code === "ArrowLeft" || event.code === "KeyA") {
                movePlane(-1); // –í–ª–µ–≤–æ
            } else if (event.code === "ArrowRight" || event.code === "KeyD") {
                movePlane(1); // –í–ø—Ä–∞–≤–æ
            }
        },
        []
    );

    const handleTouchStart = (e) => {
        const touchX = e.touches[0].clientX; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É —Å–≤–∞–π–ø–∞
        startTouchX.current = touchX;
        startTouchTime.current = Date.now();
    };

    // –î–≤–∏–∂–µ–Ω–∏–µ –ø–∞–ª—å—Ü–∞
    const handleTouchMove = (e) => {
        const touchX = e.touches ? e.touches[0].clientX : e.clientX; // –ü–æ–ª—É—á–∞–µ–º X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Å–≤–∞–π–ø–∞ –∏–ª–∏ –º—ã—à–∏
        if (startTouchX.current === null) {
            startTouchX.current = touchX; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        }
        const deltaX = touchX - startTouchX.current; // –°—á–∏—Ç–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        const elapsedTime = (Date.now() - startTouchTime.current) / 1000; // –í—Ä–µ–º—è —Å–≤–∞–π–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const swipeSpeed = Math.abs(deltaX) / elapsedTime; // –°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–∞–π–ø–∞
        console.log("delta", deltaX);
        console.log("swipeSpeed", swipeSpeed);

        if (Math.abs(deltaX) > swipeThreshold && swipeSpeed > minSwipeSpeed) {
            if (deltaX > 0) {
                movePlane(1); // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ (–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–ª–µ–≤–æ)
            } else if (deltaX < 0) {
                movePlane(-1); // –°–≤–∞–π–ø –≤–ª–µ–≤–æ (–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–ø—Ä–∞–≤–æ)
            }
            // setPlaneX((prevX) => prevX + deltaX); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞ –ø–æ –æ—Å–∏ X
            // startTouchX.current = touchX; // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            startTouchX.current = null;
            startTouchTime.current = null;
        }
    };

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∂–µ—Å—Ç–∞
    const handleTouchEnd = () => {
        startTouchX.current = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º—ã—à–∏ –∏ —Å–≤–∞–π–ø–æ–≤
    useEffect(() => {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
        window.addEventListener("keydown", handleKeyDown);

        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            window.removeEventListener("keydown", handleKeyDown);
        };
    }, [handleKeyDown]);

    // useEffect(() => {
    //     setFallingItems((items) =>
    //         items.filter((item) => {
    //             const planeRect = planeRef.current?.getBoundingClientRect();
    //             if (!planeRect) return true;
    //
    //             const planeInRow = ROWS[planeRow]; // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–ª–µ—Ç–∞
    //             const itemInRow = ROWS[item.row]; // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    //
    //             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä—è–¥–æ–≤ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    //             const isCollected =
    //                 Math.abs(planeInRow - itemInRow) < 5 && // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä—è–¥–æ–≤
    //                 item.y >= 90; // –ü—Ä–µ–¥–º–µ—Ç –¥–æ—Å—Ç–∏–≥ —Å–∞–º–æ–ª–µ—Ç–∞
    //
    //             if (isCollected) {
    //                 setCollected((prev) => ({
    //                     ...prev,
    //                     [item.name]: prev[item.name] + 1,
    //                 }));
    //                 return false; // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Å–æ–±—Ä–∞–Ω
    //             }
    //             return true; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–±—Ä–∞–Ω
    //         })
    //     );
    // }, [fallingItems, planeRow]);

    // useEffect(() => {
    //     setFallingItems((items) =>
    //         items.filter((item) => {
    //             const planeRect = planeRef.current?.getBoundingClientRect();
    //             if (!planeRect) return true;
    //
    //             // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–∞–º–æ–ª–µ—Ç–∞
    //             const planex = planeRect.left;
    //             const planeY = planeRect.top;
    //             const planeWidth = planeRect.width;
    //             const planeHeight = planeRect.height;
    //
    //             // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª–∏
    //             const itemX = (item.x / 100) * window.innerWidth;
    //             const itemY = (item.y / 100) * window.innerHeight;
    //
    //             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –æ–±–ª–∞—Å—Ç—å—é —Å–∞–º–æ–ª–µ—Ç–∞
    //             const isCollected =
    //                 itemY >= planeY && // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
    //                 itemY <= planeY + planeHeight && // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
    //                 itemX >= planex - planeWidth && // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
    //                 itemX <= planex + planeWidth; // –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–æ–ª–µ—Ç–∞
    //
    //             if (isCollected) {
    //                 setCollected((prev) => ({
    //                     ...prev,
    //                     [item.name]: prev[item.name] + 1
    //                 }));
    //                 return false; // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Å–æ–±—Ä–∞–Ω
    //             }
    //             return true; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–±—Ä–∞–Ω
    //         })
    //     );
    // }, [fallingSpeed]);

    // // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞
    // useEffect(() => {
    //     const interval = setInterval(() => {
    //         setPlanePosition((prev) => (prev + (targetPosition - prev) * 0.1)); // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    //     }, 16); // –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–∫–æ–ª–æ 60 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
    //
    //     return () => clearInterval(interval);
    // }, [targetPosition]);
    const handleDragEnd = (e, info) => {
        setPlaneRow(info.point.x); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∞–º–æ–ª–µ—Ç–∞
    };
    return (
        <div className="container">
            <div ref={constraintsRef}
                 onTouchStart={handleTouchStart}
                 onTouchMove={handleTouchMove}
                // onTouchEnd={handleTouchEnd}
                 className="game-container">
                {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º motion.div –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */}
                <div
                    ref={planeRef}
                    // drag="x"
                    // dragMomentum={false}
                    // dragTransition={{velocity: 0.1}}
                    // dragConstraints={constraintsRef}
                    className="plane"
                    // animate={{left: `${startTouchX?.current}px`}} // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞
                    // transition={{type: "spring", stiffness: 300, damping: 25}}
                    // style={{left: `${planeX}px`}}
                    style={{left: `${ROWS[planeRowIndex]}%`}}
                    // style={{ position: 'absolute', top: '50%' }}
                >
                    ‚úàÔ∏è
                </div>
                {fallingItems.map((item) => (
                    <motion.div
                        key={item.id}
                        className="falling-item"
                        style={{
                            // top: `${item.y}%`,
                            left: `${item.x}%`
                        }}
                        animate={{
                            top: `${item.y}%` // –ü–ª–∞–≤–Ω–æ –º–µ–Ω—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                        }}
                        transition={{
                            type: "tween"
                            // duration: 1// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—É–∂–∏–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
                            //     // stiffness: 100, // –ñ–µ—Å—Ç–∫–æ—Å—Ç—å –ø—Ä—É–∂–∏–Ω—ã
                            //     // damping: 25 // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
                        }}
                    >
                        {item.icon}
                    </motion.div>
                ))}
            </div>

            <div className="counter">
                {ingredients.map((ingredient) => (
                    <div key={ingredient.name} className="counter-item">
                        <span>{ingredient.icon}</span>
                        <span>x{collected[ingredient.name]}</span>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default Game;
